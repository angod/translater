// Generated by CoffeeScript 1.12.3
(function() {
  var blsd, clearWindowsContent, commonBorderType, commonSliderColor, focusedWindowBorderColor, form, fs, gtranslate, gtranslateGetTranslation, gtranslateLinesLength, gtranslatePrintTranslation, gtranslateRequestOptions, gttoken, multitran, request, screen, screenCenterX, screenHeight, screenWidth, singleRowWindowHeight, source, sourceInputToggle, transcription, unfocusedWindowBorderColor, wordLength;

  blsd = require("blessed");

  request = require("request");

  gttoken = require("google-translate-token");

  fs = require("fs");

  focusedWindowBorderColor = "blue";

  unfocusedWindowBorderColor = "green";

  commonBorderType = "line";

  commonSliderColor = "white";

  screen = blsd.screen({
    title: "translater v.0.0.2",
    smartCSR: true
  });

  screenCenterX = (Math.floor(screen.width / 2)) - 1;

  screenWidth = screen.width;

  screenHeight = screen.height;

  singleRowWindowHeight = 3;

  form = blsd.form({
    height: singleRowWindowHeight,
    border: commonBorderType,
    style: {
      border: {
        fg: unfocusedWindowBorderColor
      }
    }
  });

  source = blsd.textbox({
    style: {
      bold: true
    },
    padding: {
      left: screenCenterX
    }
  });

  transcription = blsd.box({
    top: form.height,
    height: singleRowWindowHeight,
    border: commonBorderType,
    style: {
      border: {
        fg: unfocusedWindowBorderColor
      }
    },
    tags: true
  });

  gtranslate = blsd.box({
    top: form.height + transcription.height,
    height: Math.floor((screenHeight - (form.height + transcription.height)) / 2),
    border: commonBorderType,
    style: {
      border: {
        fg: unfocusedWindowBorderColor
      }
    },
    scrollbar: {
      bg: commonSliderColor
    },
    scrollable: true,
    tags: true
  });

  multitran = blsd.box({
    height: screenHeight - (form.height + transcription.height + gtranslate.height),
    bottom: 0,
    border: commonBorderType,
    style: {
      border: {
        fg: unfocusedWindowBorderColor
      }
    },
    scrollbar: {
      bg: commonSliderColor
    },
    scrollable: true,
    tags: true
  });

  screen.append(form);

  screen.append(transcription);

  screen.append(gtranslate);

  screen.append(multitran);

  form.append(source);

  screen.render();

  wordLength = 0;

  sourceInputToggle = true;

  screen.on("resize", function() {
    return screen.render();
  });

  screen.key(["C-c", "q"], function() {
    return process.exit(0);
  });

  clearWindowsContent = function() {
    transcription.setContent();
    gtranslate.setContent();
    return multitran.setContent();
  };

  screen.key("space", function() {
    clearWindowsContent();
    wordLength = 0;
    source.clearValue();
    source.padding.left = screenCenterX;
    source.focus();
    source.readInput();
    return screen.render();
  });

  screen.key("e", function() {
    clearWindowsContent();
    source.focus();
    source.readInput();
    return screen.render();
  });

  source.on("keypress", function(ch) {
    if ((ch != null) && sourceInputToggle) {
      if (ch.charCodeAt() === 13) {
        form.submit();
      } else if (ch.charCodeAt() === 127) {
        if (wordLength) {
          --wordLength;
        }
      } else {
        ++wordLength;
      }
      source.padding.left = screenCenterX - Math.ceil(wordLength / 2);
      return screen.render();
    }
  });

  source.on("focus", function() {
    sourceInputToggle = true;
    form.style.border.fg = focusedWindowBorderColor;
    return screen.render();
  });

  form.on("submit", function() {
    sourceInputToggle = false;
    form.style.border.fg = unfocusedWindowBorderColor;
    gtranslateGetTranslation(source.value);
    gtranslate.focus();
    return screen.render();
  });

  gtranslate.on("focus", function() {
    gtranslate.style.border.fg = focusedWindowBorderColor;
    return screen.render();
  });

  gtranslate.on("blur", function() {
    gtranslate.style.border.fg = unfocusedWindowBorderColor;
    return screen.render();
  });

  gtranslateLinesLength = 0;

  gtranslate.key(["k", "j"], function(ch) {
    if (gtranslateLinesLength > gtranslate.height) {
      if (ch === "k") {
        if (gtranslate.getScroll() - gtranslate.childOffset) {
          --gtranslate.childBase;
          gtranslate.scroll(-1);
        } else {
          gtranslate.setScroll(0);
        }
      } else {
        if (gtranslate.childBase + gtranslate.height <= gtranslateLinesLength) {
          ++gtranslate.childBase;
          gtranslate.scroll(1);
        } else {
          gtranslate.setScroll(gtranslateLinesLength - 1);
        }
      }
    }
    return screen.render();
  });

  gtranslateRequestOptions = {
    url: "",
    method: "GET",
    headers: {
      "User-Agent": "Chromium/53.0.2785.143"
    },
    setUrl: function(token, slWord) {
      return this.url = "https://translate.google.com/translate_a/single?client=t&sl=en&tl=ru&hl=en&dt=at&dt=bd&dt=ex&dt=ld&dt=md&dt=qca&dt=rw&dt=rm&dt=ss&dt=t&ie=UTF-8&oe=UTF-8&source=btn&rom=1&ssel=0&tsel=0&kc=0&tk=" + token + "&q=" + slWord;
    }
  };

  gtranslateGetTranslation = function(slWord) {
    return gttoken.get(slWord).then(function(token) {
      gtranslateRequestOptions.setUrl(token.value, slWord);
      return request(gtranslateRequestOptions, function(error, response, result) {
        var fixedResult, i, j, k, len, len1, logTime, mostPossibleTranslation, ref, ref1, resultLength, sourceWordClass, ti, translationInstance, translationInstances, translationPercentUsage;
        if (error || response.statusCode !== 200) {
          logTime = new Date();
          logTime.setTime(logTime.getTime() + Math.abs(logTime.getTimezoneOffset() * 60 * 1000));
          gtranslate.setContent(logTime.toUTCString() + ":\tCannot connect to Google Translate");
          return screen.render();
        } else {
          i = 1;
          fixedResult = "";
          resultLength = result.length - 1;
          while (i < resultLength) {
            if ((result[i] === "," && result[i + 1] === ",") || (result[i] === "[" && result[i + 1] === ",") || (result[i] === "," && result[i + 1] === "]")) {
              fixedResult += result[i++] + "\"\"";
            } else {
              fixedResult += result[i++];
            }
          }
          result = JSON.parse("[" + fixedResult + "]");
          translationInstances = [];
          mostPossibleTranslation = result[0][0][0];
          ref = result[1];
          for (ti = j = 0, len = ref.length; j < len; ti = ++j) {
            sourceWordClass = ref[ti];
            translationInstances.push([sourceWordClass[0], []]);
            ref1 = sourceWordClass[2];
            for (k = 0, len1 = ref1.length; k < len1; k++) {
              translationInstance = ref1[k];
              translationPercentUsage = (translationInstance[3] * 100).toFixed(3);
              translationInstances[ti][1].push([translationPercentUsage, translationInstance[0], translationInstance[1]]);
            }
          }
          return gtranslatePrintTranslation(mostPossibleTranslation, translationInstances);
        }
      });
    });
  };

  gtranslatePrintTranslation = function(mostPossibleTranslation, translationInstances) {
    var currentLine, fmtTranslationInstance, i, isEmptyLeadingSymbol, j, k, len, len1, padLen, ptOutputFieldLen, ref, sourceWordClass, ti, translationInstance;
    currentLine = 0;
    ptOutputFieldLen = 32;
    gtranslate.insertLine(currentLine++, "{center}{bold}{magenta-fg}" + mostPossibleTranslation + "{/magenta-fg}{/bold}{/center}");
    for (ti = j = 0, len = translationInstances.length; j < len; ti = ++j) {
      sourceWordClass = translationInstances[ti];
      gtranslate.insertLine(currentLine++, " ".repeat(12) + ("{bold}{red-fg}" + sourceWordClass[0] + "{/red-fg}{/bold}"));
      ref = sourceWordClass[1];
      for (i = k = 0, len1 = ref.length; k < len1; i = ++k) {
        translationInstance = ref[i];
        fmtTranslationInstance = "| ";
        if (!isNaN(translationInstance[0])) {
          isEmptyLeadingSymbol = 10 > translationInstance[0] ? "0" : "";
          fmtTranslationInstance += "{cyan-fg}" + isEmptyLeadingSymbol + translationInstance[0] + "{/cyan-fg} | ";
        } else {
          fmtTranslationInstance += "{cyan-fg}00.000{/cyan-fg} | ";
        }
        padLen = ptOutputFieldLen - translationInstance[1].length;
        fmtTranslationInstance += ("{green-fg}" + translationInstance[1] + "{/green-fg}") + " ".repeat(padLen) + " | ";
        fmtTranslationInstance += "{yellow-fg}" + translationInstance[2] + "{/yellow-fg}";
        gtranslate.insertLine(currentLine++, fmtTranslationInstance);
      }
    }
    gtranslateLinesLength = gtranslate.getLines().length;
    gtranslate.deleteLine(gtranslateLinesLength);
    return screen.render();
  };

}).call(this);
